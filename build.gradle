plugins {
	id 'fabric-loom' version '0.10-SNAPSHOT'
	id 'maven-publish'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'com.modrinth.minotaur' version '1.2.1'
	id 'org.cadixdev.licenser' version '0.6.1'
	id "com.github.breadmoirai.github-release" version "2.2.12"
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = "${project.mod_version}+mc${project.minecraft_version}"
group = project.maven_group

minecraft {
}

repositories {
	maven { url "https://maven.fabricmc.net/" }
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.siphalor.de/" }
	maven { url "https://jitpack.io/" }
}

sourceSets {
	testmod {
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
	}
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.minecraft_version}+build.${project.yarn_mappings}"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	def fabric_deps = [
	        'fabric-api-base': '0.4.0+65d505fc9c',
			'fabric-networking-api-v1': '1.0.16+65d505fc9c',
			'include': false,
			'fabric-registry-sync-v0': '0.8.3+2e160e0f9c',
			'fabric-resource-loader-v0': '0.4.9+65d505fc9c',
			'fabric-tag-extensions-v0': '1.2.3+65d505fc9c'
	]

	def inc = true
	for (entry in fabric_deps.entrySet()) {
		if (entry.getKey() == "include") {
			inc = entry.getValue()
			continue
		}
        modImplementation 'net.fabricmc.fabric-api:' + entry.getKey() + ':' + entry.getValue()
		if (inc) {
			include 'net.fabricmc.fabric-api:' + entry.getKey() + ':' + entry.getValue()
		}
	}

	modCompileOnly("me.shedaniel:RoughlyEnoughItems-fabric:6.0.247-alpha") {
		exclude group: "net.fabricmc.fabric-api"
	}
	modImplementation("de.siphalor:modsoftheworld-$minecraft_major_version:1.0.9+mc1.18-pre1") {
		transitive false
	}

	modRuntimeOnly("com.github.astei:lazydfu:master-SNAPSHOT")

	testmodImplementation sourceSets.main.output
}

//sourceSets.main.java.exclude("de/siphalor/nbtcrafting/compat/**/*REI*")

license {
	header = project.file('LICENSE_HEADER')

	include '**/*.java'
}

processResources {
	inputs.property "version", version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": version
		duplicatesStrategy DuplicatesStrategy.INCLUDE
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier.set("sources")
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId = "${project.archives_base_name}-${project.minecraft_major_version}"
			from components.java
		}
	}
	repositories {
		if (project.hasProperty("siphalorMavenUser")) {
			maven {
				name = "Siphalor"
				url = "https://maven.siphalor.de/upload.php"
				credentials {
					username = siphalorMavenUser
					password = siphalorMavenPassword
				}
			}
		}
	}
}

// Mod sites

static def getChangelog() {
	return 'git log -1 --format=format:##%x20%s%n%n%b%nRelease%x20by%x20%an --grep Version'.execute().text.trim()
}

task uploadToModSites {
	dependsOn build
	group = "upload"
}

if (project.hasProperty("siphalorCurseForgeApi")) {
	curseforge {
		apiKey project.siphalorCurseForgeApi
		project {
			id = "314633"
			releaseType = "release"
			changelogType = "markdown"
			changelog = project.getChangelog()
			addGameVersion("Fabric")
			for (version in ((String) project.mod_mc_versions).split(";")) {
				addGameVersion(version)
			}
			relations {
				embeddedLibrary "fabric-api"
				optionalDependency "roughly-enough-items"
			}
			mainArtifact(remapJar) {
				displayName = "[${project.mod_mc_version_specifier}] ${project.mod_version}"
			}
		}
	}
	uploadToModSites.finalizedBy(tasks.curseforge)
}

import com.modrinth.minotaur.TaskModrinthUpload
if (project.hasProperty("siphalorModrinthApi")) {
	task modrinth (type: TaskModrinthUpload) {
		group = "upload"
		dependsOn(build)

		token = project.siphalorModrinthApi
		projectId = "18ztUZP5"
		versionNumber = version
		versionName = "[${project.mod_mc_version_specifier}] ${project.mod_version}"
		changelog = getChangelog()
		uploadFile = remapJar
		versionType = project.mod_release
		for (version in ((String) project.mod_mc_versions).split(";")) {
			addGameVersion(version)
		}
		addLoader("fabric")
	}
	uploadToModSites.finalizedBy(tasks.modrinth)
}

if (project.hasProperty("siphalorGitHubToken")) {
	githubRelease {
		token siphalorGitHubToken
		targetCommitish.set("$minecraft_major_version-2.0")
		releaseName.set("Version $mod_version")
		body.set(getChangelog())
		releaseAssets remapJar.getArchiveFile()
		prerelease.set(mod_release != "release")
		overwrite.set(true)
	}
	uploadToModSites.finalizedBy(tasks.githubRelease)
}
